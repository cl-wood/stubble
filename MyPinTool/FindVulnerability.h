
// For Vulnerability Analysis
//unordered_map<ADDRINT, UINT32> MemoryAllocations;
unordered_map<ADDRINT, UINT32> TaintMap;

/* ===================================================================== */
/* Vulnerability Analysis routines                                       */
/* ===================================================================== */
 
// Gets value of Arg1 to malloc call
VOID Arg1Before(CHAR * name, ADDRINT size)
{
    if (IN_MAIN) {
        TraceFile << name << "(" << size << ")" << endl;
    }
}

VOID MallocAfter(ADDRINT ret)
{
    if (IN_MAIN) {
        TraceFile << "  returns " << ret << endl;
    }
}

// Update map of memory address => size of allocated memory pairs.
// Remove entries when memory freed
/*
VOID MallocInfo(CHAR* name, ADDRINT size, ADDRINT allocationAddress)
{
    // 
    if (IN_MAIN) {
        MemoryAllocations[allocationAddress] = size;
        TraceFile << name << "(" << size << ") bytes at " << allocationAddress << endl;
    }
}

VOID FreeInfo(CHAR * name, ADDRINT allocationAddress)
{
    // Memory Freed, set size to 0 to signify this
    if (IN_MAIN) {
        MemoryAllocations[allocationAddress] = 0;
        TraceFile << name << "(" << allocationAddress << ")" << endl;
    }
}
*/
